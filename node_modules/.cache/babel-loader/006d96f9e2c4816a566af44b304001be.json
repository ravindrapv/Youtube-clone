{"ast":null,"code":"var _jsxFileName = \"/home/venkataravindra-p-v/MountBlue/React/Youtube-clone/src/components/Watch/Watch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { MoreHoriz, PlaylistAdd, Reply, ThumbDownAlt, ThumbUpAlt } from \"@material-ui/icons\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppContext } from \"../../context/appContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Watch = ({\n  video\n}) => {\n  _s();\n  var _video$timestamp;\n  const {\n    currentUser\n  } = useAppContext();\n  const history = useHistory();\n  const handleAvatarRedirect = () => history.push(\"/PreviewChannel\");\n  const [showDesc, setShowDesc] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [comment, setNewComment] = useState(\"\");\n  const [subscribers, setSubscribers] = useState([]);\n  const [subscribed, setSubscribed] = useState(false);\n  const db = firebase.firestore();\n\n  // Fetch subscribers from Firebase\n  // Check if the current user is subscribed\n  useEffect(() => {\n    const checkSubscription = async () => {\n      if (currentUser) {\n        const userSubscriptionsRef = db.collection(\"subscribers\").doc(video.channelId).collection(\"users\");\n        try {\n          const userSubscriptionDoc = await userSubscriptionsRef.doc(currentUser.uid).get();\n          const isSubscribed = userSubscriptionDoc.exists;\n          setSubscribed(isSubscribed);\n\n          // Save subscription status to local storage\n          localStorage.setItem(\"subscriptionStatus\", JSON.stringify(isSubscribed));\n        } catch (error) {\n          console.error(\"Error checking subscription status:\", error.message);\n        }\n      }\n    };\n    checkSubscription();\n  }, [currentUser, video.channelId, db]);\n\n  // Check if the current user is subscribed\n  useEffect(() => {\n    const checkSubscription = async () => {\n      if (currentUser) {\n        const userSubscriptionsRef = db.collection(\"subscribers\").doc(video.channelId).collection(\"users\");\n        const userSubscriptionDoc = await userSubscriptionsRef.doc(currentUser.uid).get();\n        const isSubscribed = userSubscriptionDoc.exists;\n        setSubscribed(isSubscribed);\n\n        // Save subscription status to local storage\n        localStorage.setItem(\"subscriptionStatus\", JSON.stringify(isSubscribed));\n      }\n    };\n    checkSubscription();\n  }, [currentUser, video.channelId, db]);\n\n  // Fetch comments from Firebase\n  useEffect(() => {\n    const videoCommentsRef = db.collection(\"comments\").doc(video.id).collection(\"comments\");\n    const unsubscribe = videoCommentsRef.onSnapshot(snapshot => {\n      const commentsData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setComments(commentsData);\n    });\n    return () => unsubscribe();\n  }, [video.id, db]);\n  const handleAddComment = async () => {\n    const videoCommentsRef = db.collection(\"comments\").doc(video.id).collection(\"comments\");\n    await videoCommentsRef.add({\n      user: currentUser.displayName,\n      // Assuming user.displayName is available\n      text: comment,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setNewComment(\"\"); // Clear input after commenting\n  };\n\n  const handleSubscribe = async () => {\n    if (currentUser) {\n      const userSubscriptionsRef = db.collection(\"subscribers\").doc(video.channelId).collection(\"users\");\n\n      // Check if the user is already subscribed\n      const userSubscriptionDoc = await userSubscriptionsRef.doc(currentUser.uid).get();\n      if (!userSubscriptionDoc.exists) {\n        // User is not subscribed, update Firestore\n        await userSubscriptionsRef.doc(currentUser.uid).set({\n          subscribedAt: firebase.firestore.FieldValue.serverTimestamp()\n        });\n\n        // Update subscriber count\n        updateSubscribers();\n      }\n      setSubscribed(true); // Update local state\n\n      // Save subscription status to local storage\n      localStorage.setItem(\"subscriptionStatus\", JSON.stringify(true));\n    }\n  };\n  const updateSubscribers = async () => {\n    const channelDocRef = db.collection(\"subscribers\").doc(video.channelId);\n    try {\n      const channelDoc = await channelDocRef.get();\n      const currentSubscribers = channelDoc.exists ? channelDoc.data().subscribers || 0 : 0;\n\n      // Use set with merge option if the document doesn't exist\n      await channelDocRef.set({\n        subscribers: currentSubscribers + 1\n      }, {\n        merge: true\n      });\n      console.log(\"Successfully subscribed!\");\n\n      // Update the subscribers state after the count is updated in the database\n      setSubscribers(currentSubscribers + 1);\n    } catch (error) {\n      console.error(\"Error updating channel subscribers:\", error.message);\n    }\n  };\n  const formatted = moment.unix(video === null || video === void 0 ? void 0 : (_video$timestamp = video.timestamp) === null || _video$timestamp === void 0 ? void 0 : _video$timestamp.seconds).format(\"MMM DD, YYYY  \");\n\n  // Retrieve subscription status from local storage on component mount\n  useEffect(() => {\n    const storedSubscriptionStatus = localStorage.getItem(\"subscriptionStatus\");\n    if (storedSubscriptionStatus) {\n      setSubscribed(JSON.parse(storedSubscriptionStatus));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"watch\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"watch__wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"watch__left\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"watch__video\",\n          autoPlay: true,\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: video.videoURL,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"watch__leftBtm\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"watch__title\",\n            children: video.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"watch__videoInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"watch__videoInfoLeft\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"videothumb__text\",\n                children: [\"1 views \\u2022 \", formatted]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"watch__videoInfoRight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"watch__details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"watch__detailsContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"videothumb__details watch__avatarWrap\",\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: handleAvatarRedirect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"videothumb__channel\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"videothumb__title\",\n                  children: video.channelName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"videothumb__text watch__subCount\",\n                  children: [subscribers, \" Subscribers\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"watch__subBtn\",\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: handleSubscribe,\n              disabled: subscribed // Disable button if already subscribed\n              ,\n              children: subscribed ? \"SUBSCRIBED\" : \"SUBSCRIBE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"watch__description\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                maxHeight: showDesc && \"100%\"\n              },\n              children: video.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"watch__showMore\",\n              onClick: () => setShowDesc(!showDesc),\n              children: [\"SHOW \", showDesc ? \"LESS\" : \"MORE\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"watch__comments\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"watch__comment\",\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                className: \"watch__commentAvatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"watch__commentDetails\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"watch__commentUser\",\n                  children: comment.user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"watch__commentText\",\n                  children: comment.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this)]\n            }, comment.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"watch__addComment\",\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              className: \"watch__commentAvatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Add a public comment...\",\n              onChange: e => setNewComment(e.target.value),\n              value: comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleAddComment,\n              children: \"Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(Watch, \"VGyPpkh6m+w5ePuaK8majN5TqbA=\", false, function () {\n  return [useAppContext, useHistory];\n});\n_c = Watch;\nexport default Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useState","useEffect","MoreHoriz","PlaylistAdd","Reply","ThumbDownAlt","ThumbUpAlt","Avatar","Button","moment","firebase","useHistory","useAppContext","jsxDEV","_jsxDEV","Watch","video","_s","_video$timestamp","currentUser","history","handleAvatarRedirect","push","showDesc","setShowDesc","comments","setComments","comment","setNewComment","subscribers","setSubscribers","subscribed","setSubscribed","db","firestore","checkSubscription","userSubscriptionsRef","collection","doc","channelId","userSubscriptionDoc","uid","get","isSubscribed","exists","localStorage","setItem","JSON","stringify","error","console","message","videoCommentsRef","id","unsubscribe","onSnapshot","snapshot","commentsData","docs","map","data","handleAddComment","add","user","displayName","text","timestamp","FieldValue","serverTimestamp","handleSubscribe","set","subscribedAt","updateSubscribers","channelDocRef","channelDoc","currentSubscribers","merge","log","formatted","unix","seconds","format","storedSubscriptionStatus","getItem","parse","className","children","autoPlay","controls","src","videoURL","type","fileName","_jsxFileName","lineNumber","columnNumber","title","style","cursor","onClick","channelName","color","variant","disabled","maxHeight","description","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/home/venkataravindra-p-v/MountBlue/React/Youtube-clone/src/components/Watch/Watch.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport {\n  MoreHoriz,\n  PlaylistAdd,\n  Reply,\n  ThumbDownAlt,\n  ThumbUpAlt,\n} from \"@material-ui/icons\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppContext } from \"../../context/appContext\";\n\nconst Watch = ({ video }) => {\n  const { currentUser } = useAppContext();\n  const history = useHistory();\n  const handleAvatarRedirect = () => history.push(\"/PreviewChannel\");\n  const [showDesc, setShowDesc] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [comment, setNewComment] = useState(\"\");\n  const [subscribers, setSubscribers] = useState([]);\n  const [subscribed, setSubscribed] = useState(false);\n  const db = firebase.firestore();\n\n  // Fetch subscribers from Firebase\n  // Check if the current user is subscribed\n  useEffect(() => {\n    const checkSubscription = async () => {\n      if (currentUser) {\n        const userSubscriptionsRef = db\n          .collection(\"subscribers\")\n          .doc(video.channelId)\n          .collection(\"users\");\n\n        try {\n          const userSubscriptionDoc = await userSubscriptionsRef\n            .doc(currentUser.uid)\n            .get();\n\n          const isSubscribed = userSubscriptionDoc.exists;\n          setSubscribed(isSubscribed);\n\n          // Save subscription status to local storage\n          localStorage.setItem(\n            \"subscriptionStatus\",\n            JSON.stringify(isSubscribed)\n          );\n        } catch (error) {\n          console.error(\"Error checking subscription status:\", error.message);\n        }\n      }\n    };\n\n    checkSubscription();\n  }, [currentUser, video.channelId, db]);\n\n  // Check if the current user is subscribed\n  useEffect(() => {\n    const checkSubscription = async () => {\n      if (currentUser) {\n        const userSubscriptionsRef = db\n          .collection(\"subscribers\")\n          .doc(video.channelId)\n          .collection(\"users\");\n\n        const userSubscriptionDoc = await userSubscriptionsRef\n          .doc(currentUser.uid)\n          .get();\n\n        const isSubscribed = userSubscriptionDoc.exists;\n        setSubscribed(isSubscribed);\n\n        // Save subscription status to local storage\n        localStorage.setItem(\n          \"subscriptionStatus\",\n          JSON.stringify(isSubscribed)\n        );\n      }\n    };\n\n    checkSubscription();\n  }, [currentUser, video.channelId, db]);\n\n  // Fetch comments from Firebase\n  useEffect(() => {\n    const videoCommentsRef = db\n      .collection(\"comments\")\n      .doc(video.id)\n      .collection(\"comments\");\n\n    const unsubscribe = videoCommentsRef.onSnapshot((snapshot) => {\n      const commentsData = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setComments(commentsData);\n    });\n\n    return () => unsubscribe();\n  }, [video.id, db]);\n\n  const handleAddComment = async () => {\n    const videoCommentsRef = db\n      .collection(\"comments\")\n      .doc(video.id)\n      .collection(\"comments\");\n\n    await videoCommentsRef.add({\n      user: currentUser.displayName, // Assuming user.displayName is available\n      text: comment,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setNewComment(\"\"); // Clear input after commenting\n  };\n\n  const handleSubscribe = async () => {\n    if (currentUser) {\n      const userSubscriptionsRef = db\n        .collection(\"subscribers\")\n        .doc(video.channelId)\n        .collection(\"users\");\n\n      // Check if the user is already subscribed\n      const userSubscriptionDoc = await userSubscriptionsRef\n        .doc(currentUser.uid)\n        .get();\n\n      if (!userSubscriptionDoc.exists) {\n        // User is not subscribed, update Firestore\n        await userSubscriptionsRef.doc(currentUser.uid).set({\n          subscribedAt: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n\n        // Update subscriber count\n        updateSubscribers();\n      }\n\n      setSubscribed(true); // Update local state\n\n      // Save subscription status to local storage\n      localStorage.setItem(\"subscriptionStatus\", JSON.stringify(true));\n    }\n  };\n\n  const updateSubscribers = async () => {\n    const channelDocRef = db.collection(\"subscribers\").doc(video.channelId);\n    try {\n      const channelDoc = await channelDocRef.get();\n      const currentSubscribers = channelDoc.exists\n        ? channelDoc.data().subscribers || 0\n        : 0;\n\n      // Use set with merge option if the document doesn't exist\n      await channelDocRef.set(\n        {\n          subscribers: currentSubscribers + 1,\n        },\n        { merge: true }\n      );\n\n      console.log(\"Successfully subscribed!\");\n\n      // Update the subscribers state after the count is updated in the database\n      setSubscribers(currentSubscribers + 1);\n    } catch (error) {\n      console.error(\"Error updating channel subscribers:\", error.message);\n    }\n  };\n\n  const formatted = moment\n    .unix(video?.timestamp?.seconds)\n    .format(\"MMM DD, YYYY  \");\n\n  // Retrieve subscription status from local storage on component mount\n  useEffect(() => {\n    const storedSubscriptionStatus = localStorage.getItem(\"subscriptionStatus\");\n    if (storedSubscriptionStatus) {\n      setSubscribed(JSON.parse(storedSubscriptionStatus));\n    }\n  }, []);\n\n  return (\n    <div className=\"watch\">\n      <div className=\"watch__wrap\">\n        <div className=\"watch__left\">\n          <video className=\"watch__video\" autoPlay controls>\n            <source src={video.videoURL} type=\"video/mp4\" />\n          </video>\n\n          <div className=\"watch__leftBtm\">\n            <h1 className=\"watch__title\">{video.title}</h1>\n\n            <div className=\"watch__videoInfo\">\n              <div className=\"watch__videoInfoLeft\">\n                <p className=\"videothumb__text\">1 views • {formatted}</p>\n              </div>\n\n              <div className=\"watch__videoInfoRight\">\n                {/* Like, dislike, share, save buttons */}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"watch__details\">\n            <div className=\"watch__detailsContainer\">\n              <div className=\"videothumb__details watch__avatarWrap\">\n                <Avatar\n                  style={{ cursor: \"pointer\" }}\n                  onClick={handleAvatarRedirect}\n                />\n                <div className=\"videothumb__channel\">\n                  <h1 className=\"videothumb__title\">{video.channelName}</h1>\n                  <p className=\"videothumb__text watch__subCount\">\n                    {subscribers} Subscribers\n                  </p>\n                </div>\n              </div>\n              <Button\n                className=\"watch__subBtn\"\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={handleSubscribe}\n                disabled={subscribed} // Disable button if already subscribed\n              >\n                {subscribed ? \"SUBSCRIBED\" : \"SUBSCRIBE\"}\n              </Button>\n            </div>\n\n            <div className=\"watch__description\">\n              <p style={{ maxHeight: showDesc && \"100%\" }}>\n                {video.description}\n              </p>\n              <p\n                className=\"watch__showMore\"\n                onClick={() => setShowDesc(!showDesc)}\n              >\n                SHOW {showDesc ? \"LESS\" : \"MORE\"}\n              </p>\n            </div>\n\n            <div className=\"watch__comments\">\n              <h2>Comments</h2>\n              {comments.map((comment) => (\n                <div key={comment.id} className=\"watch__comment\">\n                  <Avatar className=\"watch__commentAvatar\" />\n                  <div className=\"watch__commentDetails\">\n                    <p className=\"watch__commentUser\">{comment.user}</p>\n                    <p className=\"watch__commentText\">{comment.text}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"watch__addComment\">\n              <Avatar className=\"watch__commentAvatar\" />\n              <input\n                type=\"text\"\n                placeholder=\"Add a public comment...\"\n                onChange={(e) => setNewComment(e.target.value)}\n                value={comment}\n              />\n              <Button onClick={handleAddComment}>Comment</Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Watch;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,SACEC,SAAS,EACTC,WAAW,EACXC,KAAK,EACLC,YAAY,EACZC,UAAU,QACL,oBAAoB;AAC3B,SAASC,MAAM,EAAEC,MAAM,QAAQ,mBAAmB;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAO,oBAAoB;AAC3B,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,aAAa,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,gBAAA;EAC3B,MAAM;IAAEC;EAAY,CAAC,GAAGP,aAAa,CAAC,CAAC;EACvC,MAAMQ,OAAO,GAAGT,UAAU,CAAC,CAAC;EAC5B,MAAMU,oBAAoB,GAAGA,CAAA,KAAMD,OAAO,CAACE,IAAI,CAAC,iBAAiB,CAAC;EAClE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2B,OAAO,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC+B,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMiC,EAAE,GAAGvB,QAAQ,CAACwB,SAAS,CAAC,CAAC;;EAE/B;EACA;EACAjC,SAAS,CAAC,MAAM;IACd,MAAMkC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAIhB,WAAW,EAAE;QACf,MAAMiB,oBAAoB,GAAGH,EAAE,CAC5BI,UAAU,CAAC,aAAa,CAAC,CACzBC,GAAG,CAACtB,KAAK,CAACuB,SAAS,CAAC,CACpBF,UAAU,CAAC,OAAO,CAAC;QAEtB,IAAI;UACF,MAAMG,mBAAmB,GAAG,MAAMJ,oBAAoB,CACnDE,GAAG,CAACnB,WAAW,CAACsB,GAAG,CAAC,CACpBC,GAAG,CAAC,CAAC;UAER,MAAMC,YAAY,GAAGH,mBAAmB,CAACI,MAAM;UAC/CZ,aAAa,CAACW,YAAY,CAAC;;UAE3B;UACAE,YAAY,CAACC,OAAO,CAClB,oBAAoB,EACpBC,IAAI,CAACC,SAAS,CAACL,YAAY,CAC7B,CAAC;QACH,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACE,OAAO,CAAC;QACrE;MACF;IACF,CAAC;IAEDhB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAAChB,WAAW,EAAEH,KAAK,CAACuB,SAAS,EAAEN,EAAE,CAAC,CAAC;;EAEtC;EACAhC,SAAS,CAAC,MAAM;IACd,MAAMkC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAIhB,WAAW,EAAE;QACf,MAAMiB,oBAAoB,GAAGH,EAAE,CAC5BI,UAAU,CAAC,aAAa,CAAC,CACzBC,GAAG,CAACtB,KAAK,CAACuB,SAAS,CAAC,CACpBF,UAAU,CAAC,OAAO,CAAC;QAEtB,MAAMG,mBAAmB,GAAG,MAAMJ,oBAAoB,CACnDE,GAAG,CAACnB,WAAW,CAACsB,GAAG,CAAC,CACpBC,GAAG,CAAC,CAAC;QAER,MAAMC,YAAY,GAAGH,mBAAmB,CAACI,MAAM;QAC/CZ,aAAa,CAACW,YAAY,CAAC;;QAE3B;QACAE,YAAY,CAACC,OAAO,CAClB,oBAAoB,EACpBC,IAAI,CAACC,SAAS,CAACL,YAAY,CAC7B,CAAC;MACH;IACF,CAAC;IAEDR,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAAChB,WAAW,EAAEH,KAAK,CAACuB,SAAS,EAAEN,EAAE,CAAC,CAAC;;EAEtC;EACAhC,SAAS,CAAC,MAAM;IACd,MAAMmD,gBAAgB,GAAGnB,EAAE,CACxBI,UAAU,CAAC,UAAU,CAAC,CACtBC,GAAG,CAACtB,KAAK,CAACqC,EAAE,CAAC,CACbhB,UAAU,CAAC,UAAU,CAAC;IAEzB,MAAMiB,WAAW,GAAGF,gBAAgB,CAACG,UAAU,CAAEC,QAAQ,IAAK;MAC5D,MAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAErB,GAAG,KAAM;QAC/Ce,EAAE,EAAEf,GAAG,CAACe,EAAE;QACV,GAAGf,GAAG,CAACsB,IAAI,CAAC;MACd,CAAC,CAAC,CAAC;MACHlC,WAAW,CAAC+B,YAAY,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,MAAMH,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACtC,KAAK,CAACqC,EAAE,EAAEpB,EAAE,CAAC,CAAC;EAElB,MAAM4B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMT,gBAAgB,GAAGnB,EAAE,CACxBI,UAAU,CAAC,UAAU,CAAC,CACtBC,GAAG,CAACtB,KAAK,CAACqC,EAAE,CAAC,CACbhB,UAAU,CAAC,UAAU,CAAC;IAEzB,MAAMe,gBAAgB,CAACU,GAAG,CAAC;MACzBC,IAAI,EAAE5C,WAAW,CAAC6C,WAAW;MAAE;MAC/BC,IAAI,EAAEtC,OAAO;MACbuC,SAAS,EAAExD,QAAQ,CAACwB,SAAS,CAACiC,UAAU,CAACC,eAAe,CAAC;IAC3D,CAAC,CAAC;IAEFxC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;EACrB,CAAC;;EAED,MAAMyC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIlD,WAAW,EAAE;MACf,MAAMiB,oBAAoB,GAAGH,EAAE,CAC5BI,UAAU,CAAC,aAAa,CAAC,CACzBC,GAAG,CAACtB,KAAK,CAACuB,SAAS,CAAC,CACpBF,UAAU,CAAC,OAAO,CAAC;;MAEtB;MACA,MAAMG,mBAAmB,GAAG,MAAMJ,oBAAoB,CACnDE,GAAG,CAACnB,WAAW,CAACsB,GAAG,CAAC,CACpBC,GAAG,CAAC,CAAC;MAER,IAAI,CAACF,mBAAmB,CAACI,MAAM,EAAE;QAC/B;QACA,MAAMR,oBAAoB,CAACE,GAAG,CAACnB,WAAW,CAACsB,GAAG,CAAC,CAAC6B,GAAG,CAAC;UAClDC,YAAY,EAAE7D,QAAQ,CAACwB,SAAS,CAACiC,UAAU,CAACC,eAAe,CAAC;QAC9D,CAAC,CAAC;;QAEF;QACAI,iBAAiB,CAAC,CAAC;MACrB;MAEAxC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;;MAErB;MACAa,YAAY,CAACC,OAAO,CAAC,oBAAoB,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC,CAAC;IAClE;EACF,CAAC;EAED,MAAMwB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,aAAa,GAAGxC,EAAE,CAACI,UAAU,CAAC,aAAa,CAAC,CAACC,GAAG,CAACtB,KAAK,CAACuB,SAAS,CAAC;IACvE,IAAI;MACF,MAAMmC,UAAU,GAAG,MAAMD,aAAa,CAAC/B,GAAG,CAAC,CAAC;MAC5C,MAAMiC,kBAAkB,GAAGD,UAAU,CAAC9B,MAAM,GACxC8B,UAAU,CAACd,IAAI,CAAC,CAAC,CAAC/B,WAAW,IAAI,CAAC,GAClC,CAAC;;MAEL;MACA,MAAM4C,aAAa,CAACH,GAAG,CACrB;QACEzC,WAAW,EAAE8C,kBAAkB,GAAG;MACpC,CAAC,EACD;QAAEC,KAAK,EAAE;MAAK,CAChB,CAAC;MAED1B,OAAO,CAAC2B,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACA/C,cAAc,CAAC6C,kBAAkB,GAAG,CAAC,CAAC;IACxC,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACE,OAAO,CAAC;IACrE;EACF,CAAC;EAED,MAAM2B,SAAS,GAAGrE,MAAM,CACrBsE,IAAI,CAAC/D,KAAK,aAALA,KAAK,wBAAAE,gBAAA,GAALF,KAAK,CAAEkD,SAAS,cAAAhD,gBAAA,uBAAhBA,gBAAA,CAAkB8D,OAAO,CAAC,CAC/BC,MAAM,CAAC,gBAAgB,CAAC;;EAE3B;EACAhF,SAAS,CAAC,MAAM;IACd,MAAMiF,wBAAwB,GAAGrC,YAAY,CAACsC,OAAO,CAAC,oBAAoB,CAAC;IAC3E,IAAID,wBAAwB,EAAE;MAC5BlD,aAAa,CAACe,IAAI,CAACqC,KAAK,CAACF,wBAAwB,CAAC,CAAC;IACrD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpE,OAAA;IAAKuE,SAAS,EAAC,OAAO;IAAAC,QAAA,eACpBxE,OAAA;MAAKuE,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BxE,OAAA;QAAKuE,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BxE,OAAA;UAAOuE,SAAS,EAAC,cAAc;UAACE,QAAQ;UAACC,QAAQ;UAAAF,QAAA,eAC/CxE,OAAA;YAAQ2E,GAAG,EAAEzE,KAAK,CAAC0E,QAAS;YAACC,IAAI,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,eAERjF,OAAA;UAAKuE,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7BxE,OAAA;YAAIuE,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAEtE,KAAK,CAACgF;UAAK;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAE/CjF,OAAA;YAAKuE,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/BxE,OAAA;cAAKuE,SAAS,EAAC,sBAAsB;cAAAC,QAAA,eACnCxE,OAAA;gBAAGuE,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,GAAC,iBAAU,EAACR,SAAS;cAAA;gBAAAc,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtD,CAAC,eAENjF,OAAA;cAAKuE,SAAS,EAAC;YAAuB;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENjF,OAAA;UAAKuE,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7BxE,OAAA;YAAKuE,SAAS,EAAC,yBAAyB;YAAAC,QAAA,gBACtCxE,OAAA;cAAKuE,SAAS,EAAC,uCAAuC;cAAAC,QAAA,gBACpDxE,OAAA,CAACP,MAAM;gBACL0F,KAAK,EAAE;kBAAEC,MAAM,EAAE;gBAAU,CAAE;gBAC7BC,OAAO,EAAE9E;cAAqB;gBAAAuE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/B,CAAC,eACFjF,OAAA;gBAAKuE,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBAClCxE,OAAA;kBAAIuE,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAAEtE,KAAK,CAACoF;gBAAW;kBAAAR,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC1DjF,OAAA;kBAAGuE,SAAS,EAAC,kCAAkC;kBAAAC,QAAA,GAC5CzD,WAAW,EAAC,cACf;gBAAA;kBAAA+D,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNjF,OAAA,CAACN,MAAM;cACL6E,SAAS,EAAC,eAAe;cACzBgB,KAAK,EAAC,SAAS;cACfC,OAAO,EAAC,WAAW;cACnBH,OAAO,EAAE9B,eAAgB;cACzBkC,QAAQ,EAAExE,UAAW,CAAC;cAAA;cAAAuD,QAAA,EAErBvD,UAAU,GAAG,YAAY,GAAG;YAAW;cAAA6D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAENjF,OAAA;YAAKuE,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBACjCxE,OAAA;cAAGmF,KAAK,EAAE;gBAAEO,SAAS,EAAEjF,QAAQ,IAAI;cAAO,CAAE;cAAA+D,QAAA,EACzCtE,KAAK,CAACyF;YAAW;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjB,CAAC,eACJjF,OAAA;cACEuE,SAAS,EAAC,iBAAiB;cAC3Bc,OAAO,EAAEA,CAAA,KAAM3E,WAAW,CAAC,CAACD,QAAQ,CAAE;cAAA+D,QAAA,GACvC,OACM,EAAC/D,QAAQ,GAAG,MAAM,GAAG,MAAM;YAAA;cAAAqE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eAENjF,OAAA;YAAKuE,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9BxE,OAAA;cAAAwE,QAAA,EAAI;YAAQ;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EAChBtE,QAAQ,CAACkC,GAAG,CAAEhC,OAAO,iBACpBb,OAAA;cAAsBuE,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC9CxE,OAAA,CAACP,MAAM;gBAAC8E,SAAS,EAAC;cAAsB;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAC3CjF,OAAA;gBAAKuE,SAAS,EAAC,uBAAuB;gBAAAC,QAAA,gBACpCxE,OAAA;kBAAGuE,SAAS,EAAC,oBAAoB;kBAAAC,QAAA,EAAE3D,OAAO,CAACoC;gBAAI;kBAAA6B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACpDjF,OAAA;kBAAGuE,SAAS,EAAC,oBAAoB;kBAAAC,QAAA,EAAE3D,OAAO,CAACsC;gBAAI;kBAAA2B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjD,CAAC;YAAA,GALEpE,OAAO,CAAC0B,EAAE;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAMf,CACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eAENjF,OAAA;YAAKuE,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChCxE,OAAA,CAACP,MAAM;cAAC8E,SAAS,EAAC;YAAsB;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC3CjF,OAAA;cACE6E,IAAI,EAAC,MAAM;cACXe,WAAW,EAAC,yBAAyB;cACrCC,QAAQ,EAAGC,CAAC,IAAKhF,aAAa,CAACgF,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;cAC/CA,KAAK,EAAEnF;YAAQ;cAAAiE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB,CAAC,eACFjF,OAAA,CAACN,MAAM;cAAC2F,OAAO,EAAEtC,gBAAiB;cAAAyB,QAAA,EAAC;YAAO;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9E,EAAA,CAhQIF,KAAK;EAAA,QACeH,aAAa,EACrBD,UAAU;AAAA;AAAAoG,EAAA,GAFtBhG,KAAK;AAkQX,eAAeA,KAAK;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}